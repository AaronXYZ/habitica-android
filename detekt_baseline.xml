<?xml version="1.0" ?>
<SmellBaseline>
  <Blacklist></Blacklist>
  <Whitelist>
    <ID>DuplicateCaseInWhenExpression:Notification.kt$Notification$when (type) { Type.LOGIN_INCENTIVE.type -&gt; LoginIncentiveData::class.java Type.NEW_STUFF.type -&gt; NewStuffData::class.java Type.NEW_CHAT_MESSAGE.type -&gt; NewChatMessageData::class.java Type.GROUP_TASK_NEEDS_WORK.type -&gt; GroupTaskNeedsWorkData::class.java Type.GROUP_TASK_APPROVED.type -&gt; GroupTaskApprovedData::class.java Type.GROUP_TASK_REQUIRES_APPROVAL.type -&gt; GroupTaskRequiresApprovalData::class.java Type.UNALLOCATED_STATS_POINTS.type -&gt; UnallocatedPointsData::class.java Type.GUILD_INVITATION.type -&gt; GuildInvitationData::class.java Type.PARTY_INVITATION.type -&gt; PartyInvitationData::class.java Type.QUEST_INVITATION.type -&gt; QuestInvitationData::class.java Type.FIRST_DROP.type -&gt; FirstDropData::class.java Type.ACHIEVEMENT_GENERIC.type -&gt; AchievementData::class.java Type.WON_CHALLENGE.type -&gt; ChallengeWonData::class.java Type.ACHIEVEMENT_ALL_YOUR_BASE.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_BACK_TO_BASICS.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_JUST_ADD_WATER.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_LOST_MASTERCLASSER.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_MIND_OVER_MATTER.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_DUST_DEVIL.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_ARID_AUTHORITY.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_MONSTER_MAGUS.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_UNDEAD_UNDERTAKER.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_PRIMED_FOR_PAINTING.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_PEARLY_PRO.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_TICKLED_PINK.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_ROSY_OUTLOOK.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_BUG_BONANZA.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_BARE_NECESSITIES.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_FRESHWATER_FRIENDS.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_GOOD_AS_GOLD.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_ALL_THAT_GLITTERS.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_GOOD_AS_GOLD.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_BONE_COLLECTOR.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_SKELETON_CREW.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_SEEING_RED.type -&gt; AchievementData::class.java Type.ACHIEVEMENT_RED_LETTER_DAY.type -&gt; AchievementData::class.java else -&gt; null }</ID>
    <ID>DuplicateCaseInWhenExpression:NotificationsManager.kt$NotificationsManager$when (it.type) { Notification.Type.LOGIN_INCENTIVE.type -&gt; displayLoginIncentiveNotification(it) Notification.Type.ACHIEVEMENT_PARTY_UP.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_PARTY_ON.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_BEAST_MASTER.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_MOUNT_MASTER.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_TRIAD_BINGO.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_GUILD_JOINED.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_CHALLENGE_JOINED.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_INVITED_FRIEND.type -&gt; displayAchievementNotification(it) Notification.Type.WON_CHALLENGE.type -&gt; displayWonChallengeNotificaiton(it) Notification.Type.ACHIEVEMENT_ALL_YOUR_BASE.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_BACK_TO_BASICS.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_JUST_ADD_WATER.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_LOST_MASTERCLASSER.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_MIND_OVER_MATTER.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_DUST_DEVIL.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_ARID_AUTHORITY.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_MONSTER_MAGUS.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_UNDEAD_UNDERTAKER.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_PRIMED_FOR_PAINTING.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_PEARLY_PRO.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_TICKLED_PINK.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_ROSY_OUTLOOK.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_BUG_BONANZA.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_BARE_NECESSITIES.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_FRESHWATER_FRIENDS.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_GOOD_AS_GOLD.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_ALL_THAT_GLITTERS.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_GOOD_AS_GOLD.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_BONE_COLLECTOR.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_SKELETON_CREW.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_SEEING_RED.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_RED_LETTER_DAY.type -&gt; displayAchievementNotification(it) Notification.Type.ACHIEVEMENT_GENERIC.type -&gt; displayAchievementNotification( it, notifications.find { notif -&gt; notif.type == Notification.Type.ACHIEVEMENT_ONBOARDING_COMPLETE.type } != null ) Notification.Type.ACHIEVEMENT_ONBOARDING_COMPLETE.type -&gt; displayAchievementNotification(it) Notification.Type.FIRST_DROP.type -&gt; displayFirstDropNotification(it) else -&gt; false }</ID>
    <ID>EmptyCatchBlock:AmplitudeManager.kt$AmplitudeManager${ }</ID>
    <ID>EmptyCatchBlock:WorldStateSerialization.kt$WorldStateSerialization${ }</ID>
    <ID>EmptyDefaultConstructor:CustomizationRecyclerViewAdapter.kt$CustomizationRecyclerViewAdapter$()</ID>
    <ID>EmptyFunctionBlock:FallExtraGemsHabiticaPromotion.kt$FallExtraGemsHabiticaPromotion${ }</ID>
    <ID>EmptyFunctionBlock:GiftOneGetOneHabiticaPromotion.kt$GiftOneGetOneHabiticaPromotion${ }</ID>
    <ID>EmptyFunctionBlock:MainActivity.kt$MainActivity.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:PurchaseHandler.kt$PurchaseHandler.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:RealmInventoryLocalRepository.kt$RealmInventoryLocalRepository${ }</ID>
    <ID>EmptyFunctionBlock:ScoreTaskLocallyInteractor.kt$ScoreTaskLocallyInteractor.Companion${ }</ID>
    <ID>EmptyFunctionBlock:SpookyExtraGemsHabiticaPromotion.kt$SpookyExtraGemsHabiticaPromotion${ }</ID>
    <ID>EmptyFunctionBlock:Survey2021Promotion.kt$Survey2021Promotion${ }</ID>
    <ID>EmptySecondaryConstructor:Server.kt$Server${}</ID>
    <ID>ReturnCount:BaseTaskViewHolder.kt$BaseTaskViewHolder$override fun onTouch(view: View?, motionEvent: MotionEvent?): Boolean</ID>
    <ID>ReturnCount:Customization.kt$Customization$fun getImageName(userSize: String?, hairColor: String?): String</ID>
    <ID>ReturnCount:DeviceName.kt$DeviceName$ @WorkerThread fun getDeviceInfo(context: Context, codename: String?, model: String?): DeviceInfo</ID>
    <ID>ReturnCount:DeviceName.kt$DeviceName$ fun getDeviceName(codename: String?, model: String?, fallback: String?): String?</ID>
    <ID>ReturnCount:DragLinearLayout.kt$DragLinearLayout$override fun onInterceptTouchEvent(event: MotionEvent): Boolean</ID>
    <ID>ReturnCount:DragLinearLayout.kt$DragLinearLayout$override fun onTouchEvent(event: MotionEvent): Boolean</ID>
    <ID>ReturnCount:HabiticaAlertDialog.kt$HabiticaAlertDialog.Companion$private fun checkIfQueueAvailable(): Boolean</ID>
    <ID>ReturnCount:PetDetailRecyclerAdapter.kt$PetDetailRecyclerAdapter$private fun canRaiseToMount(pet: Pet): Boolean</ID>
    <ID>ReturnCount:PreferencesFragment.kt$PreferencesFragment$override fun onSharedPreferenceChanged(sharedPreferences: SharedPreferences, key: String)</ID>
    <ID>ReturnCount:RealmBaseLocalRepository.kt$RealmBaseLocalRepository$override fun &lt;T : BaseObject&gt; getLiveObject(obj: T): T?</ID>
    <ID>ReturnCount:RealmInventoryLocalRepository.kt$RealmInventoryLocalRepository$override fun feedPet(foodKey: String, petKey: String, feedValue: Int, userID: String)</ID>
    <ID>ReturnCount:RealmInventoryLocalRepository.kt$RealmInventoryLocalRepository$override fun getLiveObject(obj: OwnedItem): OwnedItem?</ID>
    <ID>ReturnCount:RealmInventoryLocalRepository.kt$RealmInventoryLocalRepository$override fun hatchPet(eggKey: String, potionKey: String, userID: String)</ID>
    <ID>ReturnCount:RealmInventoryLocalRepository.kt$RealmInventoryLocalRepository$override fun unhatchPet(eggKey: String, potionKey: String, userID: String)</ID>
    <ID>ReturnCount:StableRecyclerAdapter.kt$StableRecyclerAdapter$private fun canRaiseToMount(pet: Pet): Boolean</ID>
    <ID>StringLiteralDuplication:GuildInviteLocalNotification.kt$GuildInviteLocalNotification$"groupID"</ID>
    <ID>StringLiteralDuplication:RealmInventoryLocalRepository.kt$RealmInventoryLocalRepository$"animal"</ID>
    <ID>StringLiteralDuplication:RealmSocialLocalRepository.kt$RealmSocialLocalRepository$"userID"</ID>
    <ID>StringLiteralDuplication:RealmTaskLocalRepository.kt$RealmTaskLocalRepository$"position"</ID>
    <ID>StringLiteralDuplication:RealmTaskLocalRepository.kt$RealmTaskLocalRepository$"userId"</ID>
    <ID>StringLiteralDuplication:SafeDefaultItemAnimator.kt$SafeDefaultItemAnimator$"$toX, $fromX, $deltaX"</ID>
    <ID>TooGenericExceptionCaught:CustomizationDeserializer.kt$CustomizationDeserializer$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DeviceName.kt$DeviceName$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DeviceName.kt$DeviceName.Request.GetDeviceRunnable$e: Exception</ID>
    <ID>TooGenericExceptionCaught:HabiticaPurchaseVerifier.kt$HabiticaPurchaseVerifier$e: Exception</ID>
    <ID>TooGenericExceptionCaught:KeyHelper.kt$KeyHelper$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LoginActivity.kt$LoginActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MainActivity.kt$MainActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MainNavigationController.kt$MainNavigationController$error: Exception</ID>
    <ID>TooGenericExceptionCaught:PurchaseHandler.kt$PurchaseHandler$e: NullPointerException</ID>
    <ID>TooGenericExceptionCaught:SectionViewHolder.kt$SectionViewHolder$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SetupCustomizationRepositoryImpl.kt$SetupCustomizationRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SoundFile.kt$SoundFile$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TaskListDeserializer.kt$TaskListDeserializer$e: RuntimeException</ID>
    <ID>TooGenericExceptionCaught:TaskTagDeserializer.kt$TaskTagDeserializer$e: RuntimeException</ID>
    <ID>TooGenericExceptionCaught:WorldStateSerialization.kt$WorldStateSerialization$e: Exception</ID>
    <ID>UseIfInsteadOfWhen:MainActivity.kt$MainActivity$when (userQuestStatus) { UserQuestStatus.QUEST_BOSS -&gt; data.questDamage else -&gt; 0.0 }</ID>
    <ID>UseIfInsteadOfWhen:MountDetailRecyclerAdapter.kt$MountDetailRecyclerAdapter$when (viewType) { 1 -&gt; SectionViewHolder(parent) else -&gt; MountViewHolder(parent, equipEvents) }</ID>
    <ID>UseIfInsteadOfWhen:PetDetailRecyclerAdapter.kt$PetDetailRecyclerAdapter$when (viewType) { 1 -&gt; SectionViewHolder(parent) else -&gt; PetViewHolder(parent, equipEvents, animalIngredientsRetriever) }</ID>
    <ID>UseIfInsteadOfWhen:RecyclerViewEmptySupport.kt$RecyclerViewEmptySupport$when (field) { RecyclerViewState.DISPLAYING_DATA -&gt; updateAdapter(actualAdapter) else -&gt; { updateAdapter(emptyAdapter) emptyAdapter.notifyDataSetChanged() } }</ID>
    <ID>UseIfInsteadOfWhen:ShopItem.kt$ShopItem$when (currency) { "gold" -&gt; (value * quantity) &lt;= (user?.stats?.gp ?: 0.0) else -&gt; true }</ID>
  </Whitelist>
</SmellBaseline>
