plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}
apply plugin: 'kotlin-android'

android {
    compileSdk target_sdk

    defaultConfig {
        applicationId "com.habitrpg.android.habitica"
        minSdk 26
        targetSdk target_sdk
        versionCode 3521
        versionName app_version_name

    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            applicationIdSuffix ".debug"
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
            resValue "string", "app_name", "Habitica Debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "Habitica"
        }
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "com.google.android.gms:play-services-wearable:$play_wearables_version"
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"
    implementation 'androidx.wear:wear:1.2.0'
    implementation "androidx.wear:wear-input:1.1.0"

    //Networking
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    //REST API handling
    implementation("com.squareup.retrofit2:retrofit:$retrofit_version") {
        exclude module: 'okhttp'
    }
    implementation("com.squareup.retrofit2:converter-moshi:$retrofit_version")
    implementation("com.squareup.moshi:moshi-kotlin:$moshi_version")
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    kapt("com.squareup.moshi:moshi-kotlin-codegen:$moshi_version")

    //Analytics
    implementation "com.amplitude:android-sdk:$amplitude_version"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "androidx.preference:preference-ktx:$preferences_version"

    implementation "com.google.android.gms:play-services-auth:$play_auth_version"

    implementation project(':common')
    implementation project(':shared')
    implementation "androidx.appcompat:appcompat:$appcompat_version"

    implementation "com.google.dagger:hilt-android:$daggerhilt_version"
    kapt "com.google.dagger:hilt-compiler:$daggerhilt_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
repositories {
    mavenCentral()
}

final File HRPG_PROPS_FILE = new File(projectDir.absolutePath + '/../habitica.properties')
if (HRPG_PROPS_FILE.canRead()) {
    Properties HRPG_PROPS = new Properties()
    HRPG_PROPS.load(new FileInputStream(HRPG_PROPS_FILE))

    if (HRPG_PROPS != null) {
        android.buildTypes.all { buildType ->
            HRPG_PROPS.any { property ->
                buildType.buildConfigField "String", property.key, "\"${property.value}\""
            }
        }
    } else {
        throw new MissingResourceException('habitica.properties found but some entries are missing')
    }
} else {
    throw new MissingResourceException('habitica.properties not found')
}